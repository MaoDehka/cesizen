name: CESIZen CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: cesizen-backend
  IMAGE_NAME_FRONTEND: cesizen-frontend

jobs:
  # Job de Build et Test
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, dom, fileinfo, mysql, gd
          coverage: none

      - name: Install Composer dependencies
        working-directory: backend
        run: |
          composer install --prefer-dist --no-progress --no-suggest --optimize-autoloader

      - name: Copy .env file and inject JWT_SECRET
        working-directory: backend
        run: |
          cp .env.example .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
          php artisan key:generate

      - name: Create SQLite database
        working-directory: backend
        run: |
          touch database/database.sqlite

      - name: Run Laravel migrations
        working-directory: backend
        run: |
          php artisan migrate --force
          php artisan db:seed --force

      - name: Run Laravel tests
        working-directory: backend
        run: |
          php artisan test

      - name: Install Frontend dependencies
        working-directory: frontend
        run: npm ci

      - name: Build Frontend
        working-directory: frontend
        run: npm run build

      - name: Run Frontend tests (if any)
        working-directory: frontend
        run: |
          echo "Frontend tests would run here"

  # Job de Lint
  lint:
    name: Lint Code Base
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Lint Code Base
        uses: github/super-linter@v4
        env:
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_ALL_CODEBASE: false
          VALIDATE_DOCKERFILE_HADOLINT: true
          HADOLINT_CONFIG_FILE: .hadolint.yaml
          VALIDATE_YAML: true

  # Job d'audit de sécurité
  security-audit:
    runs-on: ubuntu-latest
    needs: [build-and-test]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Frontend Security Audit
        working-directory: frontend
        run: |
          npm ci
          npm audit --audit-level=high

      - name: Backend Security Audit
        working-directory: backend
        run: |
          composer install
          composer audit

  # Build et Push des images Docker
  build-and-push-images:
    runs-on: ubuntu-latest
    needs: [build-and-test, lint, security-audit]
    if: github.event_name == 'push'
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Backend
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/maodehka/${{ env.IMAGE_NAME_BACKEND }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Extract metadata for Frontend
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/maodehka/${{ env.IMAGE_NAME_FRONTEND }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          platform: linux/amd64,linux/arm64
          push: true
          no-cache: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}

      - name: Build and push Frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          platform: linux/amd64,linux/arm64
          push: true
          no-cache: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}

  # Déploiement en développement
  deploy-development:
    runs-on: ubuntu-latest
    needs: [build-and-push-images]
    environment:
      name: development
    if: github.ref == 'refs/heads/develop'
    
    steps:
      - name: Deploy to Development
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.DEV_HOST }}
          username: ${{ secrets.DEV_USER }}
          key: ${{ secrets.DEV_SSH_KEY }}
          script: |
            cd /opt/cesizen-dev
            docker compose -f docker-compose.dev.yml pull
            docker compose -f docker-compose.dev.yml up -d
            docker system prune -f

  # Déploiement en test
  deploy-test:
    runs-on: ubuntu-latest
    needs: [build-and-push-images]
    environment:
      name: test
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Deploy to Test
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.TEST_HOST }}
          username: ${{ secrets.TEST_USER }}
          key: ${{ secrets.TEST_SSH_KEY }}
          script: |
            cd /opt/cesizen-test
            docker compose -f docker-compose.test.yml pull
            docker compose -f docker-compose.test.yml up -d
            docker system prune -f

  # Déploiement en production (manuel)
  deploy-production:
    runs-on: ubuntu-latest
    needs: [deploy-test]
    environment:
      name: production
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Deploy to Production
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          script: |
            cd /opt/cesizen-prod
            docker compose -f docker-compose.prod.yml pull
            docker compose -f docker-compose.prod.yml up -d
            docker system prune -f
            