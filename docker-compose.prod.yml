version: '3.8'

services:
  # Base de donnÃ©es MySQL pour la production
  mysql:
    image: mysql:8.0
    container_name: cesizen-prod-mysql
    environment:
      MYSQL_ROOT_PASSWORD: prod_root_password_secure
      MYSQL_DATABASE: cesizen_prod
      MYSQL_USER: cesizen_user
      MYSQL_PASSWORD: prod_password_secure
    volumes:
      - mysql_prod_data:/var/lib/mysql
    networks:
      - cesizen-prod-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Backend Laravel
  backend:
    image: ghcr.io/maodehka/cesizen-backend:latest
    platform: linux/amd64
    container_name: cesizen-prod-backend
    environment:
      APP_ENV: production
      APP_DEBUG: "false"
      APP_KEY: base64:${LARAVEL_APP_KEY}
      APP_URL: https://cesizen-prod.chickenkiller.com
      
      DB_CONNECTION: mysql
      DB_HOST: mysql
      DB_PORT: 3306
      DB_DATABASE: cesizen_prod
      DB_USERNAME: cesizen_user
      DB_PASSWORD: prod_password_secure
      
      CACHE_DRIVER: redis
      SESSION_DRIVER: redis
      QUEUE_CONNECTION: redis
      
      REDIS_HOST: redis
      REDIS_PORT: 6379
      
      MAIL_MAILER: log
      
      JWT_SECRET: ${JWT_SECRET}
      
      LOG_CHANNEL: daily
      LOG_LEVEL: warning
      
      # SÃ©curitÃ© HTTPS
      SESSION_SECURE_COOKIE: "true"
      SESSION_SAME_SITE: lax
      SANCTUM_STATEFUL_DOMAINS: "cesizen-prod.chickenkiller.com"
    volumes:
      - backend_prod_storage:/var/www/html/storage
      - backend_prod_logs:/var/www/html/storage/logs
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - cesizen-prod-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  # Frontend Vue.js
  frontend:
    image: ghcr.io/maodehka/cesizen-frontend:latest
    platform: linux/amd64
    container_name: cesizen-prod-frontend
    environment:
      VITE_API_URL: https://cesizen-prod.chickenkiller.com/api
      VITE_APP_ENV: production
    depends_on:
      - backend
    networks:
      - cesizen-prod-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  # Redis pour le cache et les sessions
  redis:
    image: redis:7-alpine
    container_name: cesizen-prod-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_prod_data:/data
    networks:
      - cesizen-prod-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Nginx avec configuration HTTPS
  nginx:
    image: nginx:alpine
    container_name: cesizen-prod-nginx
    volumes:
      - ./nginx/prod-https.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl-params.conf:/etc/nginx/ssl-params.conf
      - ./nginx/certbot:/var/www/certbot
      - certbot_www:/var/www/certbot
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
      - frontend
    networks:
      - cesizen-prod-network
    restart: unless-stopped
    command: >
      sh -c "
        # Attendre que certbot gÃ©nÃ¨re les certificats
        while [ ! -f /etc/letsencrypt/live/cesizen-prod.chickenkiller.com/fullchain.pem ]; do
          echo 'Waiting for SSL certificates...'
          sleep 5
        done
        nginx -g 'daemon off;'
      "

  # Certbot pour Let's Encrypt
  certbot:
    image: certbot/certbot
    container_name: cesizen-prod-certbot
    volumes:
      - ./nginx/ssl:/etc/letsencrypt
      - ./nginx/certbot:/var/www/certbot
      - ./init-certbot.sh:/init-certbot.sh  # ðŸ‘ˆ ligne Ã  ajouter
    entrypoint: ["/init-certbot.sh"]
    networks:
      - cesizen-prod-network
    depends_on:
      - nginx
    command: >
      sh -c "
        # Attendre que nginx soit prÃªt
        sleep 30
        # Obtenir le certificat SSL
        certbot certonly --webroot -w /var/www/certbot -d cesizen-prod.chickenkiller.com --email admin@chickenkiller.com --agree-tos --no-eff-email
        # Configurer le renouvellement automatique
        while true; do
          sleep 12h
          certbot renew --quiet
        done
      "
    restart: unless-stopped

  # Service de backup automatique (optionnel)
  backup:
    image: alpine:latest
    container_name: cesizen-prod-backup
    volumes:
      - mysql_prod_data:/backup/mysql:ro
      - backend_prod_storage:/backup/storage:ro
      - redis_prod_data:/backup/redis:ro
      - certbot_conf:/backup/ssl:ro
    environment:
      BACKUP_SCHEDULE: ${BACKUP_SCHEDULE:-0 2 * * *}
    command: >
      sh -c "
        apk add --no-cache dcron &&
        echo '${BACKUP_SCHEDULE:-0 2 * * *} tar czf /backup/backup-$$(date +%Y%m%d_%H%M%S).tar.gz /backup/mysql /backup/storage /backup/redis /backup/ssl' | crontab - &&
        crond -f
      "
    networks:
      - cesizen-prod-network
    restart: unless-stopped

  # Watchtower pour les mises Ã  jour automatiques
  watchtower:
    image: containrrr/watchtower
    container_name: cesizen-prod-watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      WATCHTOWER_POLL_INTERVAL: 3600  # 1 heure
      WATCHTOWER_CLEANUP: "true"
      WATCHTOWER_INCLUDE_STOPPED: "true"
      WATCHTOWER_LABEL_ENABLE: "true"
    networks:
      - cesizen-prod-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "watchtower", "--help"]
      interval: 300s
      timeout: 10s
      retries: 3

volumes:
  mysql_prod_data:
    driver: local
  redis_prod_data:
    driver: local
  backend_prod_storage:
    driver: local
  backend_prod_logs:
    driver: local
  certbot_conf:
    driver: local
  certbot_www:
    driver: local

networks:
  cesizen-prod-network:
    driver: bridge